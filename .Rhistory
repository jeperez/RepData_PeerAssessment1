str(.Platform)
version
hw1_data <- read.csv("C:/Users/KSALCEDON/Desktop/hw1_data.csv")
View(hw1_data)
hw1_data <- read.csv("C:/Users/KSALCEDON/Desktop/hw1_data.csv", nrows=2)
View(hw1_data)
hw1_data <- read.csv("C:/Users/KSALCEDON/Desktop/hw1_data.csv")
View(hw1_data)
nrows(hw1_data)
nrow(hw1_data)
hw1_data[152:153,]
head[hw1_data]
hw1_data[47,1]
hw1_data[!complete.cases(hw1_data),]
nrow(hw1_data[!complete.cases(hw1_data),])
mean(hw1_data[,1],na.rm=TRUE)
df <- subset(hw1_data, Ozone > 31 & Temp > 90)
df
mean(df[,Solar.R])
df[,Solar.R]
df[,Ozone]
mean(df[,2])
mean(x[,4]<-subset(df, Month == 6))
x<-subset8df, Month == 6))
x<-subset(df, Month == 6))
x<-subset(df, Month == 6)
mean(x[,4])
x
df <- subset(hw1_data, Month == 6)
mean(df[,4])
df <- subset(hw1_data, Month == 5)
max(df[,1])
df
max(df[,1])
which.max(df[,1],)
which.max(df[,1])
df
which.max(df[,1])
max(df[,1], na.rm = TRUE)
library("KernSmooth")
swirl()
library(swirl)  # Loads swirl
swirl()  # Runs swirl
1:20
pi:10
15:1
:
`:`
?`:`
seq(1,20)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "jeperez")
my_name
paste(my_char, collapse = " ")
paste(my_name, collapse = " ")
paste("Hello", "world!", sep =" ")
paste(1:3, c("x", "y", "z", sep =""))
paste(1:3, c("X", "Y", "Z", sep =""))
paste(c(1,2,3), c("X", "Y", "Z", sep =""))
paste(1:3, c("X", "Y", "Z"), sep ="")
paste(LETTERS, 1:4, sep="-")
x <- c(44, na, 5, na)
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
myData <- sample(c(y, z), 100)
is.na(myData)
myNA <- is.na(myData)
myNA
myData == NA
sum(myNA)
myData
0/0
Inf - Inf
x <- c(rnorm(20), rep(NA, times=20))
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) % x > 0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2,10)]
vect <- c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2 <- c(11, 2, na)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo","bar")]
myvector <- c(1:20)
myvector <- 1:20
myVector <- c(1:20)
myVector <- 1:20
myVector
dim(myVector)
length(myVector)
dim(myVector) <- c(4,5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix <- myVector
?matrix()
?matrix
myMatrix2 <- matrix(myVector, nrow=4, ncol=5)
identical(myMatrix, myMatrix2)
patiens <- c("Bill", "Gina", "Kelly", "Sean")
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, myMatrix)
myData <- data.frame(patients, myMatrix)
myData
class(myData)
cnames <- c("patients", "age", "weight", "rating", "test")
cnames <- c("patient", "age", "weight", "rating", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(myData) <- cnames
myData
set.seed(1)
rpois(5,2)
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
set.seed(1)
rpois(5, 2)
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
library(ggplot)
library(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
install.packages("knitr")
# Loading and preprocessing the data
* The data is read from the csv file.
```{r}
activityData <- read.csv(file="activity.csv");
head(activityData);
```
lapply(activityData, class)
getwd()
setwd("C:/Users/KSALCEDON/Documents/GitHub/RepData_PeerAssessment1")
getwd()
lapply(activityData, class)
# Loading and preprocessing the data
* The data is read from the csv file.
```{r}
activityData <- read.csv(file="activity.csv");
head(activityData);
```
lapply(activityData, class)
activityData$date <- as.Date(activityData$date)
class(activityData$date)
dataFiltered <- activityData[!is.na(activityData$steps),]
dataRaw      <- activityData
data <- dataFiltered
hist(data$steps, col="green", main="Steps per day" , xlab="steps");
c( mean(data$steps) , median(data$steps))
intervalData <- data.frame(interval = unique(activityData$interval));
for (i in 1:nrow(intervalData)) {
subset <- data[data$interval == data[i,"interval"],];
intervalData[i,"mean_all_days"] <- mean(subset$steps)
};
head(intervalData);
plot(intervalData$mean_all_days
, type="l"
, xlab="interval"
, ylab="mean(steps per day"
);
intervalData[which.max(intervalData$mean_all_days),]
nrow(dataRaw[is.na(dataRaw$steps),])
estimated <- data.frame(dataRaw[0,]);
estimated <- rbind(estimated, dataRaw)
head(estimated)
for (i in 1:nrow(intervalData) ) {
interval <- intervalData[i,"interval"]
meanVal <- intervalData[i,"mean_all_days"]
rows <- which(is.na(estimated$steps))
estimated[rows, "steps"] <- meanVal
}
data <- estimated
head(data)
hist(data$steps, col="green", main="Steps per day (estimated)" , xlab="steps");
c( mean(data$steps) , median(data$steps))
isWeekend <- function(x) {
if( x == "Sunday" || x == "Saturday") "weekend" else "weekday";
}
data$day <- weekdays(data$date)
data$dayType <- lapply(data$day, isWeekend)
#make it a factor
data$dayType <- sapply(data$dayType, as.factor)
print(lapply(data, class))
head(data[data$dayType == "weekday",])
head(data[data$dayType == "weekend",])
library("lattice")
dayType <- data$dayType
xyplot( steps~interval | dayType, data=data, type="l", layout=c(1,2))
```{r}
activityData <- read.csv(file="activity.csv");
head(activityData);
```
activityData <- read.csv(file="activity.csv");
head(activityData);
lapply(activityData, class)
activityData$date <- as.Date(activityData$date)
class(activityData$date)
dataFiltered <- activityData[!is.na(activityData$steps),]
dataRaw      <- activityData
data <- dataFiltered
hist(data$steps, col="green", main="Steps per day" , xlab="steps");
c( mean(data$steps) , median(data$steps))
intervalData <- data.frame(interval = unique(activityData$interval));
for (i in 1:nrow(intervalData)) {
subset <- data[data$interval == data[i,"interval"],];
intervalData[i,"mean_all_days"] <- mean(subset$steps)
};
head(intervalData);
plot(intervalData$mean_all_days
, type="l"
, xlab="interval"
, ylab="mean(steps per day"
);
intervalData[which.max(intervalData$mean_all_days),]
nrow(dataRaw[is.na(dataRaw$steps),])
estimated <- data.frame(dataRaw[0,]);
estimated <- rbind(estimated, dataRaw)
head(estimated)
for (i in 1:nrow(intervalData) ) {
interval <- intervalData[i,"interval"]
meanVal <- intervalData[i,"mean_all_days"]
rows <- which(is.na(estimated$steps))
estimated[rows, "steps"] <- meanVal
}
data <- estimated
head(data)
hist(data$steps, col="green", main="Steps per day (estimated)" , xlab="steps");
c( mean(data$steps) , median(data$steps))
isWeekend <- function(x) {
if( x == "Sunday" || x == "Saturday") "weekend" else "weekday";
}
data$day <- weekdays(data$date)
data$dayType <- lapply(data$day, isWeekend)
#make it a factor
data$dayType <- sapply(data$dayType, as.factor)
print(lapply(data, class))
head(data[data$dayType == "weekday",])
head(data[data$dayType == "weekend",])
source('~/.active-rstudio-document', echo=TRUE)
warnings()
